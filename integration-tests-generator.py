from collections import namedtuple
import json
import os
import sys
import binascii

def integrationTestsContractGen(data):
    o = ""
    o = o + "pragma solidity ^0.8.0;\n"
    o = o + "import \"@std/Test.sol\";\n"
    o = o + "import \"src/verifier/step1/Step1Logic.sol\";\n"
    o = o + "import \"src/verifier/step1/Step1Data.sol\";\n"
    o = o + "import \"src/verifier/step2/Step2Logic.sol\";\n"
    o = o + "import \"src/verifier/step2/Step2Data.sol\";\n"
    o = o + "\n"
    o = o + "contract IntegrationTests is Test {\n"

    # Step 1 verification testing
    o = o + "function testVerificationStep1() public pure {\n"
    o = o + "uint256 numSteps = " + str(data.numSteps) + ";\n"
    o = o + "NovaVerifierStep1DataLib.CompressedSnarkStep1 memory snark = NovaVerifierStep1DataLib.getSnark();\n"
    o = o + "NovaVerifierStep1Lib.verify(snark, numSteps);\n"
    o = o + "}\n"

    # Step 2 verification testing
    o = o + "function testVerificationStep2() public pure {\n"
    o = o + "uint256 numSteps = " + str(data.numSteps) + ";\n"
    o = o + "uint256[] memory z0_primary = new uint256[](" + str(len(data.z0_primary)) + ");\n"
    index = 0
    for x in data.z0_primary:
        val = bytearray.fromhex(('{0:0{1}x}'.format(int(x, 16), 64)))
        val.reverse()
        o = o + "z0_primary[" + str(index) + "] = 0x" + "{0:0{1}x}".format(int(binascii.hexlify(val), 16), 64) + ";\n"
        index = index + 1

    o = o + "uint256[] memory z0_secondary = new uint256[](" + str(len(data.z0_secondary)) + ");\n"
    index = 0
    for x in data.z0_secondary:
        val = bytearray.fromhex(('{0:0{1}x}'.format(int(x, 16), 64)))
        val.reverse()
        o = o + "z0_secondary[" + str(index) + "] = 0x" + "{0:0{1}x}".format(int(binascii.hexlify(val), 16), 64) + ";\n"
        index = index + 1

    o = o + "NovaVerifierStep2DataLib.CompressedSnarkStep2Primary memory proofDataPrimary = NovaVerifierStep2DataLib.getCompressedSnarkStep2Primary();\n"
    o = o + "NovaVerifierStep2DataLib.CompressedSnarkStep2Secondary memory proofDataSecondary = NovaVerifierStep2DataLib.getCompressedSnarkStep2Secondary();\n"
    o = o + "NovaVerifierStep2DataLib.VerifierKeyStep2 memory vk = NovaVerifierStep2DataLib.getVerifierKeyStep2();\n"

    # TODO replace it with regular poseidon contract regeneration
    o = o + "(PoseidonConstants.Pallas memory pallasConstants, PoseidonConstants.Vesta memory vestaConstants) = PoseidonConstants.getPoseidonConstantsForBasicComparison();\n"
    o = o + "NovaVerifierStep2Lib.verifyPrimary(vestaConstants, proofDataPrimary, vk, numSteps, z0_primary);\n"
    o = o + "NovaVerifierStep2Lib.verifySecondary(pallasConstants, proofDataSecondary, vk, numSteps, z0_secondary);\n"

    o = o + "}\n"
    o = o + "}\n"

    return o


compressedSnarkJsonPath = sys.argv[1]
if not os.path.exists(compressedSnarkJsonPath):
    print("compressed snark (json) input file is missing")
    exit(1)

verifierKeyJsonPath = sys.argv[2]
if not os.path.exists(verifierKeyJsonPath):
    print("verifier key (json) input file is missing")
    exit(1)

step1DataGenerateCommand = 'python src/verifier/step1/step1-data-contract-gen.py ' + compressedSnarkJsonPath + ' > src/verifier/step1/Step1Data.sol'
os.system(step1DataGenerateCommand)

step2DataGenerateCommand = 'python src/verifier/step2/step2-data-contract-gen.py ' + verifierKeyJsonPath + ' ' + compressedSnarkJsonPath + ' > src/verifier/step2/Step2Data.sol'
os.system(step2DataGenerateCommand)

proofMetadataJsonPath = sys.argv[3]
if not os.path.exists(proofMetadataJsonPath):
    print("proof metadata (json) input file is missing")
    exit(1)

IntegrationTestsData = namedtuple('_IntegrationTestsData', ('numSteps', 'z0_primary', 'z0_secondary'))

f = open(os.path.abspath(proofMetadataJsonPath))
proofMetadata = json.load(f)
z0_primary = proofMetadata['z0_primary']
z0_secondary = proofMetadata['z0_secondary']
numSteps = proofMetadata['num_steps']

integrationTestsData = IntegrationTestsData(numSteps, z0_primary, z0_secondary)

data = integrationTestsContractGen(integrationTestsData)

print("// SPDX-License-Identifier: Apache-2.0")
print("// Do not change manually. This contract has been auto-generated by", sys.argv[0])
print(data)
